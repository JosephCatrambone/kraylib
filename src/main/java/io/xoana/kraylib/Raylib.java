/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.12
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package io.xoana.kraylib;

public class Raylib implements RaylibConstants {
  public static void InitWindow(int width, int height, String title) {
    RaylibJNI.InitWindow(width, height, title);
  }

  public static void CloseWindow() {
    RaylibJNI.CloseWindow();
  }

  public static boolean IsWindowReady() {
    return RaylibJNI.IsWindowReady();
  }

  public static boolean WindowShouldClose() {
    return RaylibJNI.WindowShouldClose();
  }

  public static boolean IsWindowMinimized() {
    return RaylibJNI.IsWindowMinimized();
  }

  public static void ToggleFullscreen() {
    RaylibJNI.ToggleFullscreen();
  }

  public static void SetWindowIcon(Image image) {
    RaylibJNI.SetWindowIcon(Image.getCPtr(image), image);
  }

  public static void SetWindowTitle(String title) {
    RaylibJNI.SetWindowTitle(title);
  }

  public static void SetWindowPosition(int x, int y) {
    RaylibJNI.SetWindowPosition(x, y);
  }

  public static void SetWindowMonitor(int monitor) {
    RaylibJNI.SetWindowMonitor(monitor);
  }

  public static void SetWindowMinSize(int width, int height) {
    RaylibJNI.SetWindowMinSize(width, height);
  }

  public static void SetWindowSize(int width, int height) {
    RaylibJNI.SetWindowSize(width, height);
  }

  public static int GetScreenWidth() {
    return RaylibJNI.GetScreenWidth();
  }

  public static int GetScreenHeight() {
    return RaylibJNI.GetScreenHeight();
  }

  public static void ShowCursor() {
    RaylibJNI.ShowCursor();
  }

  public static void HideCursor() {
    RaylibJNI.HideCursor();
  }

  public static boolean IsCursorHidden() {
    return RaylibJNI.IsCursorHidden();
  }

  public static void EnableCursor() {
    RaylibJNI.EnableCursor();
  }

  public static void DisableCursor() {
    RaylibJNI.DisableCursor();
  }

  public static void ClearBackground(Color color) {
    RaylibJNI.ClearBackground(Color.getCPtr(color), color);
  }

  public static void BeginDrawing() {
    RaylibJNI.BeginDrawing();
  }

  public static void EndDrawing() {
    RaylibJNI.EndDrawing();
  }

  public static void BeginMode2D(Camera2D camera) {
    RaylibJNI.BeginMode2D(Camera2D.getCPtr(camera), camera);
  }

  public static void EndMode2D() {
    RaylibJNI.EndMode2D();
  }

  public static void BeginMode3D(Camera3D camera) {
    RaylibJNI.BeginMode3D(Camera3D.getCPtr(camera), camera);
  }

  public static void EndMode3D() {
    RaylibJNI.EndMode3D();
  }

  public static void BeginTextureMode(RenderTexture2D target) {
    RaylibJNI.BeginTextureMode(RenderTexture2D.getCPtr(target), target);
  }

  public static void EndTextureMode() {
    RaylibJNI.EndTextureMode();
  }

  public static Ray GetMouseRay(Vector2 mousePosition, Camera3D camera) {
    return new Ray(RaylibJNI.GetMouseRay(Vector2.getCPtr(mousePosition), mousePosition, Camera3D.getCPtr(camera), camera), true);
  }

  public static Vector2 GetWorldToScreen(Vector3 position, Camera3D camera) {
    return new Vector2(RaylibJNI.GetWorldToScreen(Vector3.getCPtr(position), position, Camera3D.getCPtr(camera), camera), true);
  }

  public static Matrix GetCameraMatrix(Camera3D camera) {
    return new Matrix(RaylibJNI.GetCameraMatrix(Camera3D.getCPtr(camera), camera), true);
  }

  public static void SetTargetFPS(int fps) {
    RaylibJNI.SetTargetFPS(fps);
  }

  public static int GetFPS() {
    return RaylibJNI.GetFPS();
  }

  public static float GetFrameTime() {
    return RaylibJNI.GetFrameTime();
  }

  public static double GetTime() {
    return RaylibJNI.GetTime();
  }

  public static int ColorToInt(Color color) {
    return RaylibJNI.ColorToInt(Color.getCPtr(color), color);
  }

  public static Vector4 ColorNormalize(Color color) {
    return new Vector4(RaylibJNI.ColorNormalize(Color.getCPtr(color), color), true);
  }

  public static Vector3 ColorToHSV(Color color) {
    return new Vector3(RaylibJNI.ColorToHSV(Color.getCPtr(color), color), true);
  }

  public static Color GetColor(int hexValue) {
    return new Color(RaylibJNI.GetColor(hexValue), true);
  }

  public static Color Fade(Color color, float alpha) {
    return new Color(RaylibJNI.Fade(Color.getCPtr(color), color, alpha), true);
  }

  public static void ShowLogo() {
    RaylibJNI.ShowLogo();
  }

  public static void SetConfigFlags(short flags) {
    RaylibJNI.SetConfigFlags(flags);
  }

  public static void SetTraceLog(short types) {
    RaylibJNI.SetTraceLog(types);
  }

  public static void TraceLog(int logType, String text) {
    RaylibJNI.TraceLog(logType, text);
  }

  public static void TakeScreenshot(String fileName) {
    RaylibJNI.TakeScreenshot(fileName);
  }

  public static int GetRandomValue(int min, int max) {
    return RaylibJNI.GetRandomValue(min, max);
  }

  public static boolean IsFileExtension(String fileName, String ext) {
    return RaylibJNI.IsFileExtension(fileName, ext);
  }

  public static String GetExtension(String fileName) {
    return RaylibJNI.GetExtension(fileName);
  }

  public static String GetFileName(String filePath) {
    return RaylibJNI.GetFileName(filePath);
  }

  public static String GetDirectoryPath(String fileName) {
    return RaylibJNI.GetDirectoryPath(fileName);
  }

  public static String GetWorkingDirectory() {
    return RaylibJNI.GetWorkingDirectory();
  }

  public static boolean ChangeDirectory(String dir) {
    return RaylibJNI.ChangeDirectory(dir);
  }

  public static boolean IsFileDropped() {
    return RaylibJNI.IsFileDropped();
  }

  public static SWIGTYPE_p_p_char GetDroppedFiles(SWIGTYPE_p_int count) {
    long cPtr = RaylibJNI.GetDroppedFiles(SWIGTYPE_p_int.getCPtr(count));
    return (cPtr == 0) ? null : new SWIGTYPE_p_p_char(cPtr, false);
  }

  public static void ClearDroppedFiles() {
    RaylibJNI.ClearDroppedFiles();
  }

  public static void StorageSaveValue(int position, int value) {
    RaylibJNI.StorageSaveValue(position, value);
  }

  public static int StorageLoadValue(int position) {
    return RaylibJNI.StorageLoadValue(position);
  }

  public static boolean IsKeyPressed(int key) {
    return RaylibJNI.IsKeyPressed(key);
  }

  public static boolean IsKeyDown(int key) {
    return RaylibJNI.IsKeyDown(key);
  }

  public static boolean IsKeyReleased(int key) {
    return RaylibJNI.IsKeyReleased(key);
  }

  public static boolean IsKeyUp(int key) {
    return RaylibJNI.IsKeyUp(key);
  }

  public static int GetKeyPressed() {
    return RaylibJNI.GetKeyPressed();
  }

  public static void SetExitKey(int key) {
    RaylibJNI.SetExitKey(key);
  }

  public static boolean IsGamepadAvailable(int gamepad) {
    return RaylibJNI.IsGamepadAvailable(gamepad);
  }

  public static boolean IsGamepadName(int gamepad, String name) {
    return RaylibJNI.IsGamepadName(gamepad, name);
  }

  public static String GetGamepadName(int gamepad) {
    return RaylibJNI.GetGamepadName(gamepad);
  }

  public static boolean IsGamepadButtonPressed(int gamepad, int button) {
    return RaylibJNI.IsGamepadButtonPressed(gamepad, button);
  }

  public static boolean IsGamepadButtonDown(int gamepad, int button) {
    return RaylibJNI.IsGamepadButtonDown(gamepad, button);
  }

  public static boolean IsGamepadButtonReleased(int gamepad, int button) {
    return RaylibJNI.IsGamepadButtonReleased(gamepad, button);
  }

  public static boolean IsGamepadButtonUp(int gamepad, int button) {
    return RaylibJNI.IsGamepadButtonUp(gamepad, button);
  }

  public static int GetGamepadButtonPressed() {
    return RaylibJNI.GetGamepadButtonPressed();
  }

  public static int GetGamepadAxisCount(int gamepad) {
    return RaylibJNI.GetGamepadAxisCount(gamepad);
  }

  public static float GetGamepadAxisMovement(int gamepad, int axis) {
    return RaylibJNI.GetGamepadAxisMovement(gamepad, axis);
  }

  public static boolean IsMouseButtonPressed(int button) {
    return RaylibJNI.IsMouseButtonPressed(button);
  }

  public static boolean IsMouseButtonDown(int button) {
    return RaylibJNI.IsMouseButtonDown(button);
  }

  public static boolean IsMouseButtonReleased(int button) {
    return RaylibJNI.IsMouseButtonReleased(button);
  }

  public static boolean IsMouseButtonUp(int button) {
    return RaylibJNI.IsMouseButtonUp(button);
  }

  public static int GetMouseX() {
    return RaylibJNI.GetMouseX();
  }

  public static int GetMouseY() {
    return RaylibJNI.GetMouseY();
  }

  public static Vector2 GetMousePosition() {
    return new Vector2(RaylibJNI.GetMousePosition(), true);
  }

  public static void SetMousePosition(Vector2 position) {
    RaylibJNI.SetMousePosition(Vector2.getCPtr(position), position);
  }

  public static void SetMouseScale(float scale) {
    RaylibJNI.SetMouseScale(scale);
  }

  public static int GetMouseWheelMove() {
    return RaylibJNI.GetMouseWheelMove();
  }

  public static int GetTouchX() {
    return RaylibJNI.GetTouchX();
  }

  public static int GetTouchY() {
    return RaylibJNI.GetTouchY();
  }

  public static Vector2 GetTouchPosition(int index) {
    return new Vector2(RaylibJNI.GetTouchPosition(index), true);
  }

  public static void SetGesturesEnabled(long gestureFlags) {
    RaylibJNI.SetGesturesEnabled(gestureFlags);
  }

  public static boolean IsGestureDetected(int gesture) {
    return RaylibJNI.IsGestureDetected(gesture);
  }

  public static int GetGestureDetected() {
    return RaylibJNI.GetGestureDetected();
  }

  public static int GetTouchPointsCount() {
    return RaylibJNI.GetTouchPointsCount();
  }

  public static float GetGestureHoldDuration() {
    return RaylibJNI.GetGestureHoldDuration();
  }

  public static Vector2 GetGestureDragVector() {
    return new Vector2(RaylibJNI.GetGestureDragVector(), true);
  }

  public static float GetGestureDragAngle() {
    return RaylibJNI.GetGestureDragAngle();
  }

  public static Vector2 GetGesturePinchVector() {
    return new Vector2(RaylibJNI.GetGesturePinchVector(), true);
  }

  public static float GetGesturePinchAngle() {
    return RaylibJNI.GetGesturePinchAngle();
  }

  public static void SetCameraMode(Camera3D camera, int mode) {
    RaylibJNI.SetCameraMode(Camera3D.getCPtr(camera), camera, mode);
  }

  public static void UpdateCamera(Camera3D camera) {
    RaylibJNI.UpdateCamera(Camera3D.getCPtr(camera), camera);
  }

  public static void SetCameraPanControl(int panKey) {
    RaylibJNI.SetCameraPanControl(panKey);
  }

  public static void SetCameraAltControl(int altKey) {
    RaylibJNI.SetCameraAltControl(altKey);
  }

  public static void SetCameraSmoothZoomControl(int szKey) {
    RaylibJNI.SetCameraSmoothZoomControl(szKey);
  }

  public static void SetCameraMoveControls(int frontKey, int backKey, int rightKey, int leftKey, int upKey, int downKey) {
    RaylibJNI.SetCameraMoveControls(frontKey, backKey, rightKey, leftKey, upKey, downKey);
  }

  public static void DrawPixel(int posX, int posY, Color color) {
    RaylibJNI.DrawPixel(posX, posY, Color.getCPtr(color), color);
  }

  public static void DrawPixelV(Vector2 position, Color color) {
    RaylibJNI.DrawPixelV(Vector2.getCPtr(position), position, Color.getCPtr(color), color);
  }

  public static void DrawLine(int startPosX, int startPosY, int endPosX, int endPosY, Color color) {
    RaylibJNI.DrawLine(startPosX, startPosY, endPosX, endPosY, Color.getCPtr(color), color);
  }

  public static void DrawLineV(Vector2 startPos, Vector2 endPos, Color color) {
    RaylibJNI.DrawLineV(Vector2.getCPtr(startPos), startPos, Vector2.getCPtr(endPos), endPos, Color.getCPtr(color), color);
  }

  public static void DrawLineEx(Vector2 startPos, Vector2 endPos, float thick, Color color) {
    RaylibJNI.DrawLineEx(Vector2.getCPtr(startPos), startPos, Vector2.getCPtr(endPos), endPos, thick, Color.getCPtr(color), color);
  }

  public static void DrawLineBezier(Vector2 startPos, Vector2 endPos, float thick, Color color) {
    RaylibJNI.DrawLineBezier(Vector2.getCPtr(startPos), startPos, Vector2.getCPtr(endPos), endPos, thick, Color.getCPtr(color), color);
  }

  public static void DrawCircle(int centerX, int centerY, float radius, Color color) {
    RaylibJNI.DrawCircle(centerX, centerY, radius, Color.getCPtr(color), color);
  }

  public static void DrawCircleGradient(int centerX, int centerY, float radius, Color color1, Color color2) {
    RaylibJNI.DrawCircleGradient(centerX, centerY, radius, Color.getCPtr(color1), color1, Color.getCPtr(color2), color2);
  }

  public static void DrawCircleV(Vector2 center, float radius, Color color) {
    RaylibJNI.DrawCircleV(Vector2.getCPtr(center), center, radius, Color.getCPtr(color), color);
  }

  public static void DrawCircleLines(int centerX, int centerY, float radius, Color color) {
    RaylibJNI.DrawCircleLines(centerX, centerY, radius, Color.getCPtr(color), color);
  }

  public static void DrawRectangle(int posX, int posY, int width, int height, Color color) {
    RaylibJNI.DrawRectangle(posX, posY, width, height, Color.getCPtr(color), color);
  }

  public static void DrawRectangleV(Vector2 position, Vector2 size, Color color) {
    RaylibJNI.DrawRectangleV(Vector2.getCPtr(position), position, Vector2.getCPtr(size), size, Color.getCPtr(color), color);
  }

  public static void DrawRectangleRec(Rectangle rec, Color color) {
    RaylibJNI.DrawRectangleRec(Rectangle.getCPtr(rec), rec, Color.getCPtr(color), color);
  }

  public static void DrawRectanglePro(Rectangle rec, Vector2 origin, float rotation, Color color) {
    RaylibJNI.DrawRectanglePro(Rectangle.getCPtr(rec), rec, Vector2.getCPtr(origin), origin, rotation, Color.getCPtr(color), color);
  }

  public static void DrawRectangleGradientV(int posX, int posY, int width, int height, Color color1, Color color2) {
    RaylibJNI.DrawRectangleGradientV(posX, posY, width, height, Color.getCPtr(color1), color1, Color.getCPtr(color2), color2);
  }

  public static void DrawRectangleGradientH(int posX, int posY, int width, int height, Color color1, Color color2) {
    RaylibJNI.DrawRectangleGradientH(posX, posY, width, height, Color.getCPtr(color1), color1, Color.getCPtr(color2), color2);
  }

  public static void DrawRectangleGradientEx(Rectangle rec, Color col1, Color col2, Color col3, Color col4) {
    RaylibJNI.DrawRectangleGradientEx(Rectangle.getCPtr(rec), rec, Color.getCPtr(col1), col1, Color.getCPtr(col2), col2, Color.getCPtr(col3), col3, Color.getCPtr(col4), col4);
  }

  public static void DrawRectangleLines(int posX, int posY, int width, int height, Color color) {
    RaylibJNI.DrawRectangleLines(posX, posY, width, height, Color.getCPtr(color), color);
  }

  public static void DrawRectangleLinesEx(Rectangle rec, int lineThick, Color color) {
    RaylibJNI.DrawRectangleLinesEx(Rectangle.getCPtr(rec), rec, lineThick, Color.getCPtr(color), color);
  }

  public static void DrawTriangle(Vector2 v1, Vector2 v2, Vector2 v3, Color color) {
    RaylibJNI.DrawTriangle(Vector2.getCPtr(v1), v1, Vector2.getCPtr(v2), v2, Vector2.getCPtr(v3), v3, Color.getCPtr(color), color);
  }

  public static void DrawTriangleLines(Vector2 v1, Vector2 v2, Vector2 v3, Color color) {
    RaylibJNI.DrawTriangleLines(Vector2.getCPtr(v1), v1, Vector2.getCPtr(v2), v2, Vector2.getCPtr(v3), v3, Color.getCPtr(color), color);
  }

  public static void DrawPoly(Vector2 center, int sides, float radius, float rotation, Color color) {
    RaylibJNI.DrawPoly(Vector2.getCPtr(center), center, sides, radius, rotation, Color.getCPtr(color), color);
  }

  public static void DrawPolyEx(Vector2 points, int numPoints, Color color) {
    RaylibJNI.DrawPolyEx(Vector2.getCPtr(points), points, numPoints, Color.getCPtr(color), color);
  }

  public static void DrawPolyExLines(Vector2 points, int numPoints, Color color) {
    RaylibJNI.DrawPolyExLines(Vector2.getCPtr(points), points, numPoints, Color.getCPtr(color), color);
  }

  public static boolean CheckCollisionRecs(Rectangle rec1, Rectangle rec2) {
    return RaylibJNI.CheckCollisionRecs(Rectangle.getCPtr(rec1), rec1, Rectangle.getCPtr(rec2), rec2);
  }

  public static boolean CheckCollisionCircles(Vector2 center1, float radius1, Vector2 center2, float radius2) {
    return RaylibJNI.CheckCollisionCircles(Vector2.getCPtr(center1), center1, radius1, Vector2.getCPtr(center2), center2, radius2);
  }

  public static boolean CheckCollisionCircleRec(Vector2 center, float radius, Rectangle rec) {
    return RaylibJNI.CheckCollisionCircleRec(Vector2.getCPtr(center), center, radius, Rectangle.getCPtr(rec), rec);
  }

  public static Rectangle GetCollisionRec(Rectangle rec1, Rectangle rec2) {
    return new Rectangle(RaylibJNI.GetCollisionRec(Rectangle.getCPtr(rec1), rec1, Rectangle.getCPtr(rec2), rec2), true);
  }

  public static boolean CheckCollisionPointRec(Vector2 point, Rectangle rec) {
    return RaylibJNI.CheckCollisionPointRec(Vector2.getCPtr(point), point, Rectangle.getCPtr(rec), rec);
  }

  public static boolean CheckCollisionPointCircle(Vector2 point, Vector2 center, float radius) {
    return RaylibJNI.CheckCollisionPointCircle(Vector2.getCPtr(point), point, Vector2.getCPtr(center), center, radius);
  }

  public static boolean CheckCollisionPointTriangle(Vector2 point, Vector2 p1, Vector2 p2, Vector2 p3) {
    return RaylibJNI.CheckCollisionPointTriangle(Vector2.getCPtr(point), point, Vector2.getCPtr(p1), p1, Vector2.getCPtr(p2), p2, Vector2.getCPtr(p3), p3);
  }

  public static Image LoadImage(String fileName) {
    return new Image(RaylibJNI.LoadImage(fileName), true);
  }

  public static Image LoadImageEx(Color pixels, int width, int height) {
    return new Image(RaylibJNI.LoadImageEx(Color.getCPtr(pixels), pixels, width, height), true);
  }

  public static Image LoadImagePro(SWIGTYPE_p_void data, int width, int height, int format) {
    return new Image(RaylibJNI.LoadImagePro(SWIGTYPE_p_void.getCPtr(data), width, height, format), true);
  }

  public static Image LoadImageRaw(String fileName, int width, int height, int format, int headerSize) {
    return new Image(RaylibJNI.LoadImageRaw(fileName, width, height, format, headerSize), true);
  }

  public static void ExportImage(String fileName, Image image) {
    RaylibJNI.ExportImage(fileName, Image.getCPtr(image), image);
  }

  public static Texture2D LoadTexture(String fileName) {
    return new Texture2D(RaylibJNI.LoadTexture(fileName), true);
  }

  public static Texture2D LoadTextureFromImage(Image image) {
    return new Texture2D(RaylibJNI.LoadTextureFromImage(Image.getCPtr(image), image), true);
  }

  public static RenderTexture2D LoadRenderTexture(int width, int height) {
    return new RenderTexture2D(RaylibJNI.LoadRenderTexture(width, height), true);
  }

  public static void UnloadImage(Image image) {
    RaylibJNI.UnloadImage(Image.getCPtr(image), image);
  }

  public static void UnloadTexture(Texture2D texture) {
    RaylibJNI.UnloadTexture(Texture2D.getCPtr(texture), texture);
  }

  public static void UnloadRenderTexture(RenderTexture2D target) {
    RaylibJNI.UnloadRenderTexture(RenderTexture2D.getCPtr(target), target);
  }

  public static Color GetImageData(Image image) {
    long cPtr = RaylibJNI.GetImageData(Image.getCPtr(image), image);
    return (cPtr == 0) ? null : new Color(cPtr, false);
  }

  public static Vector4 GetImageDataNormalized(Image image) {
    long cPtr = RaylibJNI.GetImageDataNormalized(Image.getCPtr(image), image);
    return (cPtr == 0) ? null : new Vector4(cPtr, false);
  }

  public static int GetPixelDataSize(int width, int height, int format) {
    return RaylibJNI.GetPixelDataSize(width, height, format);
  }

  public static Image GetTextureData(Texture2D texture) {
    return new Image(RaylibJNI.GetTextureData(Texture2D.getCPtr(texture), texture), true);
  }

  public static void UpdateTexture(Texture2D texture, SWIGTYPE_p_void pixels) {
    RaylibJNI.UpdateTexture(Texture2D.getCPtr(texture), texture, SWIGTYPE_p_void.getCPtr(pixels));
  }

  public static Image ImageCopy(Image image) {
    return new Image(RaylibJNI.ImageCopy(Image.getCPtr(image), image), true);
  }

  public static void ImageToPOT(Image image, Color fillColor) {
    RaylibJNI.ImageToPOT(Image.getCPtr(image), image, Color.getCPtr(fillColor), fillColor);
  }

  public static void ImageFormat(Image image, int newFormat) {
    RaylibJNI.ImageFormat(Image.getCPtr(image), image, newFormat);
  }

  public static void ImageAlphaMask(Image image, Image alphaMask) {
    RaylibJNI.ImageAlphaMask(Image.getCPtr(image), image, Image.getCPtr(alphaMask), alphaMask);
  }

  public static void ImageAlphaClear(Image image, Color color, float threshold) {
    RaylibJNI.ImageAlphaClear(Image.getCPtr(image), image, Color.getCPtr(color), color, threshold);
  }

  public static void ImageAlphaCrop(Image image, float threshold) {
    RaylibJNI.ImageAlphaCrop(Image.getCPtr(image), image, threshold);
  }

  public static void ImageAlphaPremultiply(Image image) {
    RaylibJNI.ImageAlphaPremultiply(Image.getCPtr(image), image);
  }

  public static void ImageCrop(Image image, Rectangle crop) {
    RaylibJNI.ImageCrop(Image.getCPtr(image), image, Rectangle.getCPtr(crop), crop);
  }

  public static void ImageResize(Image image, int newWidth, int newHeight) {
    RaylibJNI.ImageResize(Image.getCPtr(image), image, newWidth, newHeight);
  }

  public static void ImageResizeNN(Image image, int newWidth, int newHeight) {
    RaylibJNI.ImageResizeNN(Image.getCPtr(image), image, newWidth, newHeight);
  }

  public static void ImageResizeCanvas(Image image, int newWidth, int newHeight, int offsetX, int offsetY, Color color) {
    RaylibJNI.ImageResizeCanvas(Image.getCPtr(image), image, newWidth, newHeight, offsetX, offsetY, Color.getCPtr(color), color);
  }

  public static void ImageMipmaps(Image image) {
    RaylibJNI.ImageMipmaps(Image.getCPtr(image), image);
  }

  public static void ImageDither(Image image, int rBpp, int gBpp, int bBpp, int aBpp) {
    RaylibJNI.ImageDither(Image.getCPtr(image), image, rBpp, gBpp, bBpp, aBpp);
  }

  public static Image ImageText(String text, int fontSize, Color color) {
    return new Image(RaylibJNI.ImageText(text, fontSize, Color.getCPtr(color), color), true);
  }

  public static Image ImageTextEx(Font font, String text, float fontSize, float spacing, Color tint) {
    return new Image(RaylibJNI.ImageTextEx(Font.getCPtr(font), font, text, fontSize, spacing, Color.getCPtr(tint), tint), true);
  }

  public static void ImageDraw(Image dst, Image src, Rectangle srcRec, Rectangle dstRec) {
    RaylibJNI.ImageDraw(Image.getCPtr(dst), dst, Image.getCPtr(src), src, Rectangle.getCPtr(srcRec), srcRec, Rectangle.getCPtr(dstRec), dstRec);
  }

  public static void ImageDrawRectangle(Image dst, Vector2 position, Rectangle rec, Color color) {
    RaylibJNI.ImageDrawRectangle(Image.getCPtr(dst), dst, Vector2.getCPtr(position), position, Rectangle.getCPtr(rec), rec, Color.getCPtr(color), color);
  }

  public static void ImageDrawText(Image dst, Vector2 position, String text, int fontSize, Color color) {
    RaylibJNI.ImageDrawText(Image.getCPtr(dst), dst, Vector2.getCPtr(position), position, text, fontSize, Color.getCPtr(color), color);
  }

  public static void ImageDrawTextEx(Image dst, Vector2 position, Font font, String text, float fontSize, float spacing, Color color) {
    RaylibJNI.ImageDrawTextEx(Image.getCPtr(dst), dst, Vector2.getCPtr(position), position, Font.getCPtr(font), font, text, fontSize, spacing, Color.getCPtr(color), color);
  }

  public static void ImageFlipVertical(Image image) {
    RaylibJNI.ImageFlipVertical(Image.getCPtr(image), image);
  }

  public static void ImageFlipHorizontal(Image image) {
    RaylibJNI.ImageFlipHorizontal(Image.getCPtr(image), image);
  }

  public static void ImageRotateCW(Image image) {
    RaylibJNI.ImageRotateCW(Image.getCPtr(image), image);
  }

  public static void ImageRotateCCW(Image image) {
    RaylibJNI.ImageRotateCCW(Image.getCPtr(image), image);
  }

  public static void ImageColorTint(Image image, Color color) {
    RaylibJNI.ImageColorTint(Image.getCPtr(image), image, Color.getCPtr(color), color);
  }

  public static void ImageColorInvert(Image image) {
    RaylibJNI.ImageColorInvert(Image.getCPtr(image), image);
  }

  public static void ImageColorGrayscale(Image image) {
    RaylibJNI.ImageColorGrayscale(Image.getCPtr(image), image);
  }

  public static void ImageColorContrast(Image image, float contrast) {
    RaylibJNI.ImageColorContrast(Image.getCPtr(image), image, contrast);
  }

  public static void ImageColorBrightness(Image image, int brightness) {
    RaylibJNI.ImageColorBrightness(Image.getCPtr(image), image, brightness);
  }

  public static void ImageColorReplace(Image image, Color color, Color replace) {
    RaylibJNI.ImageColorReplace(Image.getCPtr(image), image, Color.getCPtr(color), color, Color.getCPtr(replace), replace);
  }

  public static Image GenImageColor(int width, int height, Color color) {
    return new Image(RaylibJNI.GenImageColor(width, height, Color.getCPtr(color), color), true);
  }

  public static Image GenImageGradientV(int width, int height, Color top, Color bottom) {
    return new Image(RaylibJNI.GenImageGradientV(width, height, Color.getCPtr(top), top, Color.getCPtr(bottom), bottom), true);
  }

  public static Image GenImageGradientH(int width, int height, Color left, Color right) {
    return new Image(RaylibJNI.GenImageGradientH(width, height, Color.getCPtr(left), left, Color.getCPtr(right), right), true);
  }

  public static Image GenImageGradientRadial(int width, int height, float density, Color inner, Color outer) {
    return new Image(RaylibJNI.GenImageGradientRadial(width, height, density, Color.getCPtr(inner), inner, Color.getCPtr(outer), outer), true);
  }

  public static Image GenImageChecked(int width, int height, int checksX, int checksY, Color col1, Color col2) {
    return new Image(RaylibJNI.GenImageChecked(width, height, checksX, checksY, Color.getCPtr(col1), col1, Color.getCPtr(col2), col2), true);
  }

  public static Image GenImageWhiteNoise(int width, int height, float factor) {
    return new Image(RaylibJNI.GenImageWhiteNoise(width, height, factor), true);
  }

  public static Image GenImagePerlinNoise(int width, int height, int offsetX, int offsetY, float scale) {
    return new Image(RaylibJNI.GenImagePerlinNoise(width, height, offsetX, offsetY, scale), true);
  }

  public static Image GenImageCellular(int width, int height, int tileSize) {
    return new Image(RaylibJNI.GenImageCellular(width, height, tileSize), true);
  }

  public static void GenTextureMipmaps(Texture2D texture) {
    RaylibJNI.GenTextureMipmaps(Texture2D.getCPtr(texture), texture);
  }

  public static void SetTextureFilter(Texture2D texture, int filterMode) {
    RaylibJNI.SetTextureFilter(Texture2D.getCPtr(texture), texture, filterMode);
  }

  public static void SetTextureWrap(Texture2D texture, int wrapMode) {
    RaylibJNI.SetTextureWrap(Texture2D.getCPtr(texture), texture, wrapMode);
  }

  public static void DrawTexture(Texture2D texture, int posX, int posY, Color tint) {
    RaylibJNI.DrawTexture(Texture2D.getCPtr(texture), texture, posX, posY, Color.getCPtr(tint), tint);
  }

  public static void DrawTextureV(Texture2D texture, Vector2 position, Color tint) {
    RaylibJNI.DrawTextureV(Texture2D.getCPtr(texture), texture, Vector2.getCPtr(position), position, Color.getCPtr(tint), tint);
  }

  public static void DrawTextureEx(Texture2D texture, Vector2 position, float rotation, float scale, Color tint) {
    RaylibJNI.DrawTextureEx(Texture2D.getCPtr(texture), texture, Vector2.getCPtr(position), position, rotation, scale, Color.getCPtr(tint), tint);
  }

  public static void DrawTextureRec(Texture2D texture, Rectangle sourceRec, Vector2 position, Color tint) {
    RaylibJNI.DrawTextureRec(Texture2D.getCPtr(texture), texture, Rectangle.getCPtr(sourceRec), sourceRec, Vector2.getCPtr(position), position, Color.getCPtr(tint), tint);
  }

  public static void DrawTexturePro(Texture2D texture, Rectangle sourceRec, Rectangle destRec, Vector2 origin, float rotation, Color tint) {
    RaylibJNI.DrawTexturePro(Texture2D.getCPtr(texture), texture, Rectangle.getCPtr(sourceRec), sourceRec, Rectangle.getCPtr(destRec), destRec, Vector2.getCPtr(origin), origin, rotation, Color.getCPtr(tint), tint);
  }

  public static Font GetFontDefault() {
    return new Font(RaylibJNI.GetFontDefault(), true);
  }

  public static Font LoadFont(String fileName) {
    return new Font(RaylibJNI.LoadFont(fileName), true);
  }

  public static Font LoadFontEx(String fileName, int fontSize, int charsCount, SWIGTYPE_p_int fontChars) {
    return new Font(RaylibJNI.LoadFontEx(fileName, fontSize, charsCount, SWIGTYPE_p_int.getCPtr(fontChars)), true);
  }

  public static CharInfo LoadFontData(String fileName, int fontSize, SWIGTYPE_p_int fontChars, int charsCount, boolean sdf) {
    long cPtr = RaylibJNI.LoadFontData(fileName, fontSize, SWIGTYPE_p_int.getCPtr(fontChars), charsCount, sdf);
    return (cPtr == 0) ? null : new CharInfo(cPtr, false);
  }

  public static Image GenImageFontAtlas(CharInfo chars, int fontSize, int charsCount, int padding, int packMethod) {
    return new Image(RaylibJNI.GenImageFontAtlas(CharInfo.getCPtr(chars), chars, fontSize, charsCount, padding, packMethod), true);
  }

  public static void UnloadFont(Font font) {
    RaylibJNI.UnloadFont(Font.getCPtr(font), font);
  }

  public static void DrawFPS(int posX, int posY) {
    RaylibJNI.DrawFPS(posX, posY);
  }

  public static void DrawText(String text, int posX, int posY, int fontSize, Color color) {
    RaylibJNI.DrawText(text, posX, posY, fontSize, Color.getCPtr(color), color);
  }

  public static void DrawTextEx(Font font, String text, Vector2 position, float fontSize, float spacing, Color tint) {
    RaylibJNI.DrawTextEx(Font.getCPtr(font), font, text, Vector2.getCPtr(position), position, fontSize, spacing, Color.getCPtr(tint), tint);
  }

  public static int MeasureText(String text, int fontSize) {
    return RaylibJNI.MeasureText(text, fontSize);
  }

  public static Vector2 MeasureTextEx(Font font, String text, float fontSize, float spacing) {
    return new Vector2(RaylibJNI.MeasureTextEx(Font.getCPtr(font), font, text, fontSize, spacing), true);
  }

  public static String FormatText(String text) {
    return RaylibJNI.FormatText(text);
  }

  public static String SubText(String text, int position, int length) {
    return RaylibJNI.SubText(text, position, length);
  }

  public static int GetGlyphIndex(Font font, int character) {
    return RaylibJNI.GetGlyphIndex(Font.getCPtr(font), font, character);
  }

  public static void DrawLine3D(Vector3 startPos, Vector3 endPos, Color color) {
    RaylibJNI.DrawLine3D(Vector3.getCPtr(startPos), startPos, Vector3.getCPtr(endPos), endPos, Color.getCPtr(color), color);
  }

  public static void DrawCircle3D(Vector3 center, float radius, Vector3 rotationAxis, float rotationAngle, Color color) {
    RaylibJNI.DrawCircle3D(Vector3.getCPtr(center), center, radius, Vector3.getCPtr(rotationAxis), rotationAxis, rotationAngle, Color.getCPtr(color), color);
  }

  public static void DrawCube(Vector3 position, float width, float height, float length, Color color) {
    RaylibJNI.DrawCube(Vector3.getCPtr(position), position, width, height, length, Color.getCPtr(color), color);
  }

  public static void DrawCubeV(Vector3 position, Vector3 size, Color color) {
    RaylibJNI.DrawCubeV(Vector3.getCPtr(position), position, Vector3.getCPtr(size), size, Color.getCPtr(color), color);
  }

  public static void DrawCubeWires(Vector3 position, float width, float height, float length, Color color) {
    RaylibJNI.DrawCubeWires(Vector3.getCPtr(position), position, width, height, length, Color.getCPtr(color), color);
  }

  public static void DrawCubeTexture(Texture2D texture, Vector3 position, float width, float height, float length, Color color) {
    RaylibJNI.DrawCubeTexture(Texture2D.getCPtr(texture), texture, Vector3.getCPtr(position), position, width, height, length, Color.getCPtr(color), color);
  }

  public static void DrawSphere(Vector3 centerPos, float radius, Color color) {
    RaylibJNI.DrawSphere(Vector3.getCPtr(centerPos), centerPos, radius, Color.getCPtr(color), color);
  }

  public static void DrawSphereEx(Vector3 centerPos, float radius, int rings, int slices, Color color) {
    RaylibJNI.DrawSphereEx(Vector3.getCPtr(centerPos), centerPos, radius, rings, slices, Color.getCPtr(color), color);
  }

  public static void DrawSphereWires(Vector3 centerPos, float radius, int rings, int slices, Color color) {
    RaylibJNI.DrawSphereWires(Vector3.getCPtr(centerPos), centerPos, radius, rings, slices, Color.getCPtr(color), color);
  }

  public static void DrawCylinder(Vector3 position, float radiusTop, float radiusBottom, float height, int slices, Color color) {
    RaylibJNI.DrawCylinder(Vector3.getCPtr(position), position, radiusTop, radiusBottom, height, slices, Color.getCPtr(color), color);
  }

  public static void DrawCylinderWires(Vector3 position, float radiusTop, float radiusBottom, float height, int slices, Color color) {
    RaylibJNI.DrawCylinderWires(Vector3.getCPtr(position), position, radiusTop, radiusBottom, height, slices, Color.getCPtr(color), color);
  }

  public static void DrawPlane(Vector3 centerPos, Vector2 size, Color color) {
    RaylibJNI.DrawPlane(Vector3.getCPtr(centerPos), centerPos, Vector2.getCPtr(size), size, Color.getCPtr(color), color);
  }

  public static void DrawRay(Ray ray, Color color) {
    RaylibJNI.DrawRay(Ray.getCPtr(ray), ray, Color.getCPtr(color), color);
  }

  public static void DrawGrid(int slices, float spacing) {
    RaylibJNI.DrawGrid(slices, spacing);
  }

  public static void DrawGizmo(Vector3 position) {
    RaylibJNI.DrawGizmo(Vector3.getCPtr(position), position);
  }

  public static Model LoadModel(String fileName) {
    return new Model(RaylibJNI.LoadModel(fileName), true);
  }

  public static Model LoadModelFromMesh(Mesh mesh) {
    return new Model(RaylibJNI.LoadModelFromMesh(Mesh.getCPtr(mesh), mesh), true);
  }

  public static void UnloadModel(Model model) {
    RaylibJNI.UnloadModel(Model.getCPtr(model), model);
  }

  public static Mesh LoadMesh(String fileName) {
    return new Mesh(RaylibJNI.LoadMesh(fileName), true);
  }

  public static void UnloadMesh(Mesh mesh) {
    RaylibJNI.UnloadMesh(Mesh.getCPtr(mesh), mesh);
  }

  public static void ExportMesh(String fileName, Mesh mesh) {
    RaylibJNI.ExportMesh(fileName, Mesh.getCPtr(mesh), mesh);
  }

  public static BoundingBox MeshBoundingBox(Mesh mesh) {
    return new BoundingBox(RaylibJNI.MeshBoundingBox(Mesh.getCPtr(mesh), mesh), true);
  }

  public static void MeshTangents(Mesh mesh) {
    RaylibJNI.MeshTangents(Mesh.getCPtr(mesh), mesh);
  }

  public static void MeshBinormals(Mesh mesh) {
    RaylibJNI.MeshBinormals(Mesh.getCPtr(mesh), mesh);
  }

  public static Mesh GenMeshPlane(float width, float length, int resX, int resZ) {
    return new Mesh(RaylibJNI.GenMeshPlane(width, length, resX, resZ), true);
  }

  public static Mesh GenMeshCube(float width, float height, float length) {
    return new Mesh(RaylibJNI.GenMeshCube(width, height, length), true);
  }

  public static Mesh GenMeshSphere(float radius, int rings, int slices) {
    return new Mesh(RaylibJNI.GenMeshSphere(radius, rings, slices), true);
  }

  public static Mesh GenMeshHemiSphere(float radius, int rings, int slices) {
    return new Mesh(RaylibJNI.GenMeshHemiSphere(radius, rings, slices), true);
  }

  public static Mesh GenMeshCylinder(float radius, float height, int slices) {
    return new Mesh(RaylibJNI.GenMeshCylinder(radius, height, slices), true);
  }

  public static Mesh GenMeshTorus(float radius, float size, int radSeg, int sides) {
    return new Mesh(RaylibJNI.GenMeshTorus(radius, size, radSeg, sides), true);
  }

  public static Mesh GenMeshKnot(float radius, float size, int radSeg, int sides) {
    return new Mesh(RaylibJNI.GenMeshKnot(radius, size, radSeg, sides), true);
  }

  public static Mesh GenMeshHeightmap(Image heightmap, Vector3 size) {
    return new Mesh(RaylibJNI.GenMeshHeightmap(Image.getCPtr(heightmap), heightmap, Vector3.getCPtr(size), size), true);
  }

  public static Mesh GenMeshCubicmap(Image cubicmap, Vector3 cubeSize) {
    return new Mesh(RaylibJNI.GenMeshCubicmap(Image.getCPtr(cubicmap), cubicmap, Vector3.getCPtr(cubeSize), cubeSize), true);
  }

  public static Material LoadMaterial(String fileName) {
    return new Material(RaylibJNI.LoadMaterial(fileName), true);
  }

  public static Material LoadMaterialDefault() {
    return new Material(RaylibJNI.LoadMaterialDefault(), true);
  }

  public static void UnloadMaterial(Material material) {
    RaylibJNI.UnloadMaterial(Material.getCPtr(material), material);
  }

  public static void DrawModel(Model model, Vector3 position, float scale, Color tint) {
    RaylibJNI.DrawModel(Model.getCPtr(model), model, Vector3.getCPtr(position), position, scale, Color.getCPtr(tint), tint);
  }

  public static void DrawModelEx(Model model, Vector3 position, Vector3 rotationAxis, float rotationAngle, Vector3 scale, Color tint) {
    RaylibJNI.DrawModelEx(Model.getCPtr(model), model, Vector3.getCPtr(position), position, Vector3.getCPtr(rotationAxis), rotationAxis, rotationAngle, Vector3.getCPtr(scale), scale, Color.getCPtr(tint), tint);
  }

  public static void DrawModelWires(Model model, Vector3 position, float scale, Color tint) {
    RaylibJNI.DrawModelWires(Model.getCPtr(model), model, Vector3.getCPtr(position), position, scale, Color.getCPtr(tint), tint);
  }

  public static void DrawModelWiresEx(Model model, Vector3 position, Vector3 rotationAxis, float rotationAngle, Vector3 scale, Color tint) {
    RaylibJNI.DrawModelWiresEx(Model.getCPtr(model), model, Vector3.getCPtr(position), position, Vector3.getCPtr(rotationAxis), rotationAxis, rotationAngle, Vector3.getCPtr(scale), scale, Color.getCPtr(tint), tint);
  }

  public static void DrawBoundingBox(BoundingBox box, Color color) {
    RaylibJNI.DrawBoundingBox(BoundingBox.getCPtr(box), box, Color.getCPtr(color), color);
  }

  public static void DrawBillboard(Camera3D camera, Texture2D texture, Vector3 center, float size, Color tint) {
    RaylibJNI.DrawBillboard(Camera3D.getCPtr(camera), camera, Texture2D.getCPtr(texture), texture, Vector3.getCPtr(center), center, size, Color.getCPtr(tint), tint);
  }

  public static void DrawBillboardRec(Camera3D camera, Texture2D texture, Rectangle sourceRec, Vector3 center, float size, Color tint) {
    RaylibJNI.DrawBillboardRec(Camera3D.getCPtr(camera), camera, Texture2D.getCPtr(texture), texture, Rectangle.getCPtr(sourceRec), sourceRec, Vector3.getCPtr(center), center, size, Color.getCPtr(tint), tint);
  }

  public static boolean CheckCollisionSpheres(Vector3 centerA, float radiusA, Vector3 centerB, float radiusB) {
    return RaylibJNI.CheckCollisionSpheres(Vector3.getCPtr(centerA), centerA, radiusA, Vector3.getCPtr(centerB), centerB, radiusB);
  }

  public static boolean CheckCollisionBoxes(BoundingBox box1, BoundingBox box2) {
    return RaylibJNI.CheckCollisionBoxes(BoundingBox.getCPtr(box1), box1, BoundingBox.getCPtr(box2), box2);
  }

  public static boolean CheckCollisionBoxSphere(BoundingBox box, Vector3 centerSphere, float radiusSphere) {
    return RaylibJNI.CheckCollisionBoxSphere(BoundingBox.getCPtr(box), box, Vector3.getCPtr(centerSphere), centerSphere, radiusSphere);
  }

  public static boolean CheckCollisionRaySphere(Ray ray, Vector3 spherePosition, float sphereRadius) {
    return RaylibJNI.CheckCollisionRaySphere(Ray.getCPtr(ray), ray, Vector3.getCPtr(spherePosition), spherePosition, sphereRadius);
  }

  public static boolean CheckCollisionRaySphereEx(Ray ray, Vector3 spherePosition, float sphereRadius, Vector3 collisionPoint) {
    return RaylibJNI.CheckCollisionRaySphereEx(Ray.getCPtr(ray), ray, Vector3.getCPtr(spherePosition), spherePosition, sphereRadius, Vector3.getCPtr(collisionPoint), collisionPoint);
  }

  public static boolean CheckCollisionRayBox(Ray ray, BoundingBox box) {
    return RaylibJNI.CheckCollisionRayBox(Ray.getCPtr(ray), ray, BoundingBox.getCPtr(box), box);
  }

  public static RayHitInfo GetCollisionRayModel(Ray ray, Model model) {
    return new RayHitInfo(RaylibJNI.GetCollisionRayModel(Ray.getCPtr(ray), ray, Model.getCPtr(model), model), true);
  }

  public static RayHitInfo GetCollisionRayTriangle(Ray ray, Vector3 p1, Vector3 p2, Vector3 p3) {
    return new RayHitInfo(RaylibJNI.GetCollisionRayTriangle(Ray.getCPtr(ray), ray, Vector3.getCPtr(p1), p1, Vector3.getCPtr(p2), p2, Vector3.getCPtr(p3), p3), true);
  }

  public static RayHitInfo GetCollisionRayGround(Ray ray, float groundHeight) {
    return new RayHitInfo(RaylibJNI.GetCollisionRayGround(Ray.getCPtr(ray), ray, groundHeight), true);
  }

  public static String LoadText(String fileName) {
    return RaylibJNI.LoadText(fileName);
  }

  public static Shader LoadShader(String vsFileName, String fsFileName) {
    return new Shader(RaylibJNI.LoadShader(vsFileName, fsFileName), true);
  }

  public static Shader LoadShaderCode(String vsCode, String fsCode) {
    return new Shader(RaylibJNI.LoadShaderCode(vsCode, fsCode), true);
  }

  public static void UnloadShader(Shader shader) {
    RaylibJNI.UnloadShader(Shader.getCPtr(shader), shader);
  }

  public static Shader GetShaderDefault() {
    return new Shader(RaylibJNI.GetShaderDefault(), true);
  }

  public static Texture2D GetTextureDefault() {
    return new Texture2D(RaylibJNI.GetTextureDefault(), true);
  }

  public static int GetShaderLocation(Shader shader, String uniformName) {
    return RaylibJNI.GetShaderLocation(Shader.getCPtr(shader), shader, uniformName);
  }

  public static void SetShaderValue(Shader shader, int uniformLoc, SWIGTYPE_p_float value, int size) {
    RaylibJNI.SetShaderValue(Shader.getCPtr(shader), shader, uniformLoc, SWIGTYPE_p_float.getCPtr(value), size);
  }

  public static void SetShaderValuei(Shader shader, int uniformLoc, SWIGTYPE_p_int value, int size) {
    RaylibJNI.SetShaderValuei(Shader.getCPtr(shader), shader, uniformLoc, SWIGTYPE_p_int.getCPtr(value), size);
  }

  public static void SetShaderValueMatrix(Shader shader, int uniformLoc, Matrix mat) {
    RaylibJNI.SetShaderValueMatrix(Shader.getCPtr(shader), shader, uniformLoc, Matrix.getCPtr(mat), mat);
  }

  public static void SetMatrixProjection(Matrix proj) {
    RaylibJNI.SetMatrixProjection(Matrix.getCPtr(proj), proj);
  }

  public static void SetMatrixModelview(Matrix view) {
    RaylibJNI.SetMatrixModelview(Matrix.getCPtr(view), view);
  }

  public static Matrix GetMatrixModelview() {
    return new Matrix(RaylibJNI.GetMatrixModelview(), true);
  }

  public static Texture2D GenTextureCubemap(Shader shader, Texture2D skyHDR, int size) {
    return new Texture2D(RaylibJNI.GenTextureCubemap(Shader.getCPtr(shader), shader, Texture2D.getCPtr(skyHDR), skyHDR, size), true);
  }

  public static Texture2D GenTextureIrradiance(Shader shader, Texture2D cubemap, int size) {
    return new Texture2D(RaylibJNI.GenTextureIrradiance(Shader.getCPtr(shader), shader, Texture2D.getCPtr(cubemap), cubemap, size), true);
  }

  public static Texture2D GenTexturePrefilter(Shader shader, Texture2D cubemap, int size) {
    return new Texture2D(RaylibJNI.GenTexturePrefilter(Shader.getCPtr(shader), shader, Texture2D.getCPtr(cubemap), cubemap, size), true);
  }

  public static Texture2D GenTextureBRDF(Shader shader, Texture2D cubemap, int size) {
    return new Texture2D(RaylibJNI.GenTextureBRDF(Shader.getCPtr(shader), shader, Texture2D.getCPtr(cubemap), cubemap, size), true);
  }

  public static void BeginShaderMode(Shader shader) {
    RaylibJNI.BeginShaderMode(Shader.getCPtr(shader), shader);
  }

  public static void EndShaderMode() {
    RaylibJNI.EndShaderMode();
  }

  public static void BeginBlendMode(int mode) {
    RaylibJNI.BeginBlendMode(mode);
  }

  public static void EndBlendMode() {
    RaylibJNI.EndBlendMode();
  }

  public static VrDeviceInfo GetVrDeviceInfo(int vrDeviceType) {
    return new VrDeviceInfo(RaylibJNI.GetVrDeviceInfo(vrDeviceType), true);
  }

  public static void InitVrSimulator(VrDeviceInfo info) {
    RaylibJNI.InitVrSimulator(VrDeviceInfo.getCPtr(info), info);
  }

  public static void CloseVrSimulator() {
    RaylibJNI.CloseVrSimulator();
  }

  public static boolean IsVrSimulatorReady() {
    return RaylibJNI.IsVrSimulatorReady();
  }

  public static void SetVrDistortionShader(Shader shader) {
    RaylibJNI.SetVrDistortionShader(Shader.getCPtr(shader), shader);
  }

  public static void UpdateVrTracking(Camera3D camera) {
    RaylibJNI.UpdateVrTracking(Camera3D.getCPtr(camera), camera);
  }

  public static void ToggleVrMode() {
    RaylibJNI.ToggleVrMode();
  }

  public static void BeginVrDrawing() {
    RaylibJNI.BeginVrDrawing();
  }

  public static void EndVrDrawing() {
    RaylibJNI.EndVrDrawing();
  }

  public static void InitAudioDevice() {
    RaylibJNI.InitAudioDevice();
  }

  public static void CloseAudioDevice() {
    RaylibJNI.CloseAudioDevice();
  }

  public static boolean IsAudioDeviceReady() {
    return RaylibJNI.IsAudioDeviceReady();
  }

  public static void SetMasterVolume(float volume) {
    RaylibJNI.SetMasterVolume(volume);
  }

  public static Wave LoadWave(String fileName) {
    return new Wave(RaylibJNI.LoadWave(fileName), true);
  }

  public static Wave LoadWaveEx(SWIGTYPE_p_void data, int sampleCount, int sampleRate, int sampleSize, int channels) {
    return new Wave(RaylibJNI.LoadWaveEx(SWIGTYPE_p_void.getCPtr(data), sampleCount, sampleRate, sampleSize, channels), true);
  }

  public static Sound LoadSound(String fileName) {
    return new Sound(RaylibJNI.LoadSound(fileName), true);
  }

  public static Sound LoadSoundFromWave(Wave wave) {
    return new Sound(RaylibJNI.LoadSoundFromWave(Wave.getCPtr(wave), wave), true);
  }

  public static void UpdateSound(Sound sound, SWIGTYPE_p_void data, int samplesCount) {
    RaylibJNI.UpdateSound(Sound.getCPtr(sound), sound, SWIGTYPE_p_void.getCPtr(data), samplesCount);
  }

  public static void UnloadWave(Wave wave) {
    RaylibJNI.UnloadWave(Wave.getCPtr(wave), wave);
  }

  public static void UnloadSound(Sound sound) {
    RaylibJNI.UnloadSound(Sound.getCPtr(sound), sound);
  }

  public static void PlaySound(Sound sound) {
    RaylibJNI.PlaySound(Sound.getCPtr(sound), sound);
  }

  public static void PauseSound(Sound sound) {
    RaylibJNI.PauseSound(Sound.getCPtr(sound), sound);
  }

  public static void ResumeSound(Sound sound) {
    RaylibJNI.ResumeSound(Sound.getCPtr(sound), sound);
  }

  public static void StopSound(Sound sound) {
    RaylibJNI.StopSound(Sound.getCPtr(sound), sound);
  }

  public static boolean IsSoundPlaying(Sound sound) {
    return RaylibJNI.IsSoundPlaying(Sound.getCPtr(sound), sound);
  }

  public static void SetSoundVolume(Sound sound, float volume) {
    RaylibJNI.SetSoundVolume(Sound.getCPtr(sound), sound, volume);
  }

  public static void SetSoundPitch(Sound sound, float pitch) {
    RaylibJNI.SetSoundPitch(Sound.getCPtr(sound), sound, pitch);
  }

  public static void WaveFormat(Wave wave, int sampleRate, int sampleSize, int channels) {
    RaylibJNI.WaveFormat(Wave.getCPtr(wave), wave, sampleRate, sampleSize, channels);
  }

  public static Wave WaveCopy(Wave wave) {
    return new Wave(RaylibJNI.WaveCopy(Wave.getCPtr(wave), wave), true);
  }

  public static void WaveCrop(Wave wave, int initSample, int finalSample) {
    RaylibJNI.WaveCrop(Wave.getCPtr(wave), wave, initSample, finalSample);
  }

  public static SWIGTYPE_p_float GetWaveData(Wave wave) {
    long cPtr = RaylibJNI.GetWaveData(Wave.getCPtr(wave), wave);
    return (cPtr == 0) ? null : new SWIGTYPE_p_float(cPtr, false);
  }

  public static SWIGTYPE_p_MusicData LoadMusicStream(String fileName) {
    long cPtr = RaylibJNI.LoadMusicStream(fileName);
    return (cPtr == 0) ? null : new SWIGTYPE_p_MusicData(cPtr, false);
  }

  public static void UnloadMusicStream(SWIGTYPE_p_MusicData music) {
    RaylibJNI.UnloadMusicStream(SWIGTYPE_p_MusicData.getCPtr(music));
  }

  public static void PlayMusicStream(SWIGTYPE_p_MusicData music) {
    RaylibJNI.PlayMusicStream(SWIGTYPE_p_MusicData.getCPtr(music));
  }

  public static void UpdateMusicStream(SWIGTYPE_p_MusicData music) {
    RaylibJNI.UpdateMusicStream(SWIGTYPE_p_MusicData.getCPtr(music));
  }

  public static void StopMusicStream(SWIGTYPE_p_MusicData music) {
    RaylibJNI.StopMusicStream(SWIGTYPE_p_MusicData.getCPtr(music));
  }

  public static void PauseMusicStream(SWIGTYPE_p_MusicData music) {
    RaylibJNI.PauseMusicStream(SWIGTYPE_p_MusicData.getCPtr(music));
  }

  public static void ResumeMusicStream(SWIGTYPE_p_MusicData music) {
    RaylibJNI.ResumeMusicStream(SWIGTYPE_p_MusicData.getCPtr(music));
  }

  public static boolean IsMusicPlaying(SWIGTYPE_p_MusicData music) {
    return RaylibJNI.IsMusicPlaying(SWIGTYPE_p_MusicData.getCPtr(music));
  }

  public static void SetMusicVolume(SWIGTYPE_p_MusicData music, float volume) {
    RaylibJNI.SetMusicVolume(SWIGTYPE_p_MusicData.getCPtr(music), volume);
  }

  public static void SetMusicPitch(SWIGTYPE_p_MusicData music, float pitch) {
    RaylibJNI.SetMusicPitch(SWIGTYPE_p_MusicData.getCPtr(music), pitch);
  }

  public static void SetMusicLoopCount(SWIGTYPE_p_MusicData music, int count) {
    RaylibJNI.SetMusicLoopCount(SWIGTYPE_p_MusicData.getCPtr(music), count);
  }

  public static float GetMusicTimeLength(SWIGTYPE_p_MusicData music) {
    return RaylibJNI.GetMusicTimeLength(SWIGTYPE_p_MusicData.getCPtr(music));
  }

  public static float GetMusicTimePlayed(SWIGTYPE_p_MusicData music) {
    return RaylibJNI.GetMusicTimePlayed(SWIGTYPE_p_MusicData.getCPtr(music));
  }

  public static AudioStream InitAudioStream(long sampleRate, long sampleSize, long channels) {
    return new AudioStream(RaylibJNI.InitAudioStream(sampleRate, sampleSize, channels), true);
  }

  public static void UpdateAudioStream(AudioStream stream, SWIGTYPE_p_void data, int samplesCount) {
    RaylibJNI.UpdateAudioStream(AudioStream.getCPtr(stream), stream, SWIGTYPE_p_void.getCPtr(data), samplesCount);
  }

  public static void CloseAudioStream(AudioStream stream) {
    RaylibJNI.CloseAudioStream(AudioStream.getCPtr(stream), stream);
  }

  public static boolean IsAudioBufferProcessed(AudioStream stream) {
    return RaylibJNI.IsAudioBufferProcessed(AudioStream.getCPtr(stream), stream);
  }

  public static void PlayAudioStream(AudioStream stream) {
    RaylibJNI.PlayAudioStream(AudioStream.getCPtr(stream), stream);
  }

  public static void PauseAudioStream(AudioStream stream) {
    RaylibJNI.PauseAudioStream(AudioStream.getCPtr(stream), stream);
  }

  public static void ResumeAudioStream(AudioStream stream) {
    RaylibJNI.ResumeAudioStream(AudioStream.getCPtr(stream), stream);
  }

  public static boolean IsAudioStreamPlaying(AudioStream stream) {
    return RaylibJNI.IsAudioStreamPlaying(AudioStream.getCPtr(stream), stream);
  }

  public static void StopAudioStream(AudioStream stream) {
    RaylibJNI.StopAudioStream(AudioStream.getCPtr(stream), stream);
  }

  public static void SetAudioStreamVolume(AudioStream stream, float volume) {
    RaylibJNI.SetAudioStreamVolume(AudioStream.getCPtr(stream), stream, volume);
  }

  public static void SetAudioStreamPitch(AudioStream stream, float pitch) {
    RaylibJNI.SetAudioStreamPitch(AudioStream.getCPtr(stream), stream, pitch);
  }

}
