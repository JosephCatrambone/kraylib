/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.12
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package io.xoana.kraylib;

public final class ShaderLocationIndex {
  public final static ShaderLocationIndex LOC_VERTEX_POSITION = new ShaderLocationIndex("LOC_VERTEX_POSITION", RaylibJNI.LOC_VERTEX_POSITION_get());
  public final static ShaderLocationIndex LOC_VERTEX_TEXCOORD01 = new ShaderLocationIndex("LOC_VERTEX_TEXCOORD01");
  public final static ShaderLocationIndex LOC_VERTEX_TEXCOORD02 = new ShaderLocationIndex("LOC_VERTEX_TEXCOORD02");
  public final static ShaderLocationIndex LOC_VERTEX_NORMAL = new ShaderLocationIndex("LOC_VERTEX_NORMAL");
  public final static ShaderLocationIndex LOC_VERTEX_TANGENT = new ShaderLocationIndex("LOC_VERTEX_TANGENT");
  public final static ShaderLocationIndex LOC_VERTEX_COLOR = new ShaderLocationIndex("LOC_VERTEX_COLOR");
  public final static ShaderLocationIndex LOC_MATRIX_MVP = new ShaderLocationIndex("LOC_MATRIX_MVP");
  public final static ShaderLocationIndex LOC_MATRIX_MODEL = new ShaderLocationIndex("LOC_MATRIX_MODEL");
  public final static ShaderLocationIndex LOC_MATRIX_VIEW = new ShaderLocationIndex("LOC_MATRIX_VIEW");
  public final static ShaderLocationIndex LOC_MATRIX_PROJECTION = new ShaderLocationIndex("LOC_MATRIX_PROJECTION");
  public final static ShaderLocationIndex LOC_VECTOR_VIEW = new ShaderLocationIndex("LOC_VECTOR_VIEW");
  public final static ShaderLocationIndex LOC_COLOR_DIFFUSE = new ShaderLocationIndex("LOC_COLOR_DIFFUSE");
  public final static ShaderLocationIndex LOC_COLOR_SPECULAR = new ShaderLocationIndex("LOC_COLOR_SPECULAR");
  public final static ShaderLocationIndex LOC_COLOR_AMBIENT = new ShaderLocationIndex("LOC_COLOR_AMBIENT");
  public final static ShaderLocationIndex LOC_MAP_ALBEDO = new ShaderLocationIndex("LOC_MAP_ALBEDO");
  public final static ShaderLocationIndex LOC_MAP_METALNESS = new ShaderLocationIndex("LOC_MAP_METALNESS");
  public final static ShaderLocationIndex LOC_MAP_NORMAL = new ShaderLocationIndex("LOC_MAP_NORMAL");
  public final static ShaderLocationIndex LOC_MAP_ROUGHNESS = new ShaderLocationIndex("LOC_MAP_ROUGHNESS");
  public final static ShaderLocationIndex LOC_MAP_OCCLUSION = new ShaderLocationIndex("LOC_MAP_OCCLUSION");
  public final static ShaderLocationIndex LOC_MAP_EMISSION = new ShaderLocationIndex("LOC_MAP_EMISSION");
  public final static ShaderLocationIndex LOC_MAP_HEIGHT = new ShaderLocationIndex("LOC_MAP_HEIGHT");
  public final static ShaderLocationIndex LOC_MAP_CUBEMAP = new ShaderLocationIndex("LOC_MAP_CUBEMAP");
  public final static ShaderLocationIndex LOC_MAP_IRRADIANCE = new ShaderLocationIndex("LOC_MAP_IRRADIANCE");
  public final static ShaderLocationIndex LOC_MAP_PREFILTER = new ShaderLocationIndex("LOC_MAP_PREFILTER");
  public final static ShaderLocationIndex LOC_MAP_BRDF = new ShaderLocationIndex("LOC_MAP_BRDF");

  public final int swigValue() {
    return swigValue;
  }

  public String toString() {
    return swigName;
  }

  public static ShaderLocationIndex swigToEnum(int swigValue) {
    if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
      return swigValues[swigValue];
    for (int i = 0; i < swigValues.length; i++)
      if (swigValues[i].swigValue == swigValue)
        return swigValues[i];
    throw new IllegalArgumentException("No enum " + ShaderLocationIndex.class + " with value " + swigValue);
  }

  private ShaderLocationIndex(String swigName) {
    this.swigName = swigName;
    this.swigValue = swigNext++;
  }

  private ShaderLocationIndex(String swigName, int swigValue) {
    this.swigName = swigName;
    this.swigValue = swigValue;
    swigNext = swigValue+1;
  }

  private ShaderLocationIndex(String swigName, ShaderLocationIndex swigEnum) {
    this.swigName = swigName;
    this.swigValue = swigEnum.swigValue;
    swigNext = this.swigValue+1;
  }

  private static ShaderLocationIndex[] swigValues = { LOC_VERTEX_POSITION, LOC_VERTEX_TEXCOORD01, LOC_VERTEX_TEXCOORD02, LOC_VERTEX_NORMAL, LOC_VERTEX_TANGENT, LOC_VERTEX_COLOR, LOC_MATRIX_MVP, LOC_MATRIX_MODEL, LOC_MATRIX_VIEW, LOC_MATRIX_PROJECTION, LOC_VECTOR_VIEW, LOC_COLOR_DIFFUSE, LOC_COLOR_SPECULAR, LOC_COLOR_AMBIENT, LOC_MAP_ALBEDO, LOC_MAP_METALNESS, LOC_MAP_NORMAL, LOC_MAP_ROUGHNESS, LOC_MAP_OCCLUSION, LOC_MAP_EMISSION, LOC_MAP_HEIGHT, LOC_MAP_CUBEMAP, LOC_MAP_IRRADIANCE, LOC_MAP_PREFILTER, LOC_MAP_BRDF };
  private static int swigNext = 0;
  private final int swigValue;
  private final String swigName;
}

